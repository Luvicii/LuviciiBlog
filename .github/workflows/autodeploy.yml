name: 自动部署

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 检出源代码
        uses: actions/checkout@v4
        with:
          path: 'source'
          fetch-depth: 0
          
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 调试目录结构
        run: |
          echo "=== 初始目录结构 ==="
          echo "工作目录: $(pwd)"
          echo "源目录内容:"
          ls -la source
          echo "Hexo 配置文件存在: $( [ -f source/_config.yml ] && echo '是' || echo '否' )"
          
      - name: 安装 Hexo 和依赖
        working-directory: ./source
        run: |
          # 安装 Hexo CLI
          npm install hexo-cli -g
          
          # 创建必要的锁文件
          if [ ! -f package-lock.json ] && [ ! -f yarn.lock ]; then
            echo "创建 package-lock.json..."
            npm install --package-lock-only
          fi
          
          # 安装依赖
          if [ -f package-lock.json ]; then
            echo "使用 npm ci 安装依赖..."
            npm ci
          else
            echo "使用 npm install 安装依赖..."
            npm install
          fi
          
          # 验证 Hexo 安装
          hexo version
          
      - name: 生成静态文件
        working-directory: ./source
        run: |
          echo "=== 生成静态文件 ==="
          export TZ='Asia/Shanghai'
          
          echo "1. 清理 Hexo..."
          hexo clean
          
          echo "2. 运行 hexo bangumi -u..."
          hexo bangumi -u || echo "hexo bangumi 命令执行失败，但继续执行"
          
          echo "3. 生成静态文件..."
          hexo generate
          
          echo "4. 验证生成结果..."
          if [ ! -d "public" ]; then
            echo "错误: public 目录未生成！"
            echo "当前目录内容:"
            ls -la
            echo "尝试使用绝对路径生成..."
            hexo generate --cwd $(pwd)
            if [ ! -d "public" ]; then
              exit 1
            fi
          fi
          
          echo "生成完成！文件数量: $(find public -type f | wc -l)"
          [ -f public/index.html ] || { echo "错误: index.html 未生成！"; exit 1; }
          
      - name: 准备部署目录
        run: |
          echo "=== 准备部署目录 ==="
          
          # 确保部署目录存在
          mkdir -p deploy
          
          # 验证源目录存在
          if [ ! -d "source/public" ]; then
            echo "错误: source/public 目录不存在！"
            echo "源目录内容:"
            ls -la source
            echo "尝试直接使用 public 目录..."
            if [ -d "public" ]; then
              echo "发现 public 目录在工作根目录"
              cp -r public/. deploy/
            else
              exit 1
            fi
          else
            echo "复制静态文件到部署目录..."
            cp -r source/public/. deploy/
          fi
          
          # 添加必要的 GitHub Pages 文件
          touch deploy/.nojekyll
          
          # 复制 CNAME 文件（如果存在）
          if [ -f "source/CNAME" ]; then
            cp source/CNAME deploy/CNAME
          elif [ -f "CNAME" ]; then
            cp CNAME deploy/CNAME
          fi
          
          echo "部署目录内容:"
          ls -la deploy
          
      - name: 直接 Git 部署
        run: |
          echo "=== 开始 Git 部署 ==="
          cd deploy
          
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"
          
          git add .
          
          # 创建提交
          git commit -m "部署: ${{ github.sha }} [通过Github Actions]"
          
          # 强制推送到 GitHub Pages 仓库
          git push -f "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/Luvicii/Luvicii.github.io.git" HEAD:main
          
          echo "部署成功！"
